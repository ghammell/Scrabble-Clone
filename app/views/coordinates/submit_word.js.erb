<%= render 'update_droppable' %>

var player = <%= @player %>
var nextPlayer = function() {
  if (player === 1) {
    return 2
  } else {
    return 1
  }
}()

var hand = '#p' + player + '_hand'
var nextPlayerHand = '#p' + nextPlayer + '_hand'

var add_letters = {
  letters: JSON.parse("<%= escape_javascript (@letters.to_json.html_safe) %>"),
  add: function() {
    for (i=0; i < this.letters.length; i++){
      $(hand).children('ul').append(
        "<li><div class='letter'>" + this.letters[i] + "</div></li>"
      )
    }
  }
}

var add_results = {
  results: JSON.parse("<%= escape_javascript (@words.to_json.html_safe) %>"),
  wordsToAdd: [],
  finalPoints: 0,

  totalPoints: function() {
    var points = 0
    for (i=0; i < this.results.length; i++){
      var word = this.results[i][0]
      letterObjects = this.results[i][1]
      points += this.pointsForWord(word, letterObjects)
    }
    this.finalPoints = points
  },

  pointsForWord: function(word, letterObjects) {
    var wordPoints = 0
    var wordMult = [1]
    var letterMults = []
    for (j=0; j < letterObjects.length; j++) {
      currentLetterMult = 1
      letter = letterObjects[j]
      multiplier = letter.multiplier
      if (multiplier === 'W') { wordMult.push(letter.multiple) }
      else if (multiplier === 'L') {
        currentLetterMult = letter.multiple
        letterMults.push(currentLetterMult * calcPointsForLetter(letter.letter) - calcPointsForLetter(letter.letter))
        }
      wordPoints += calcPointsForLetter(letter.letter) * currentLetterMult
    }

    for (k=0; k < wordMult.length; k++) {
      wordPoints *= wordMult[k]
    }

    wordMult.shift()
    this.wordsToAdd.push([word, wordPoints, wordMult, letterMults])
    return wordPoints
  },

  addTotal: function() {
    currentScore = parseInt($(hand).children('.score').text())
    $(hand).children('.score').text(currentScore + this.finalPoints)
  },

  addWords: function() {
    for (i=0; i<this.wordsToAdd.length; i++) {
      wordObject = this.wordsToAdd[i][0]
      wordPoints = this.wordsToAdd[i][1]
      wordMults = this.wordsToAdd[i][2].map( function(num) {return 'x' + num} ).join(", ")
      letterMults = this.wordsToAdd[i][3].map( function(num) {return '+' + num}).join(", +")
      $(hand + ' .successful_words').slideDown()
      $(hand + ' .word_cluster:first').prepend("<p class='word_result'>" + wordObject.word + ' ' + letterMults + ' ' + wordMults + ' = ' + wordPoints + "pts</p>")
    }
  },

  addClusterDiv: function() {
    $(hand + ' .successful_words .words').prepend("<div class='word_cluster'></div>")
  }
}

var update_multiplier_divs = {
  coordinates: <%= @coordinate_ids %>,
  update: function() {
    for(i=0; i < this.coordinates.length; i++) {
      coord_div = $('#coordinate_' + this.coordinates[i])
      if (coord_div.hasClass('multiple_div')) {
        coord_div.addClass('taken_multiple')
      }
    }
  }
}

add_results.totalPoints()

if (add_results.finalPoints >= 0) {
  add_results.addClusterDiv()
  add_results.addWords()
  add_results.addTotal()
  add_letters.add()

  $(hand + ' .word_buttons').slideUp()
  $(nextPlayerHand + ' .word_buttons').slideDown()
  $(hand + ' .letter').removeClass('draggable ui-draggable ui-draggable-handle')
  $(nextPlayerHand + ' .letter').addClass('draggable')
  update_multiplier_divs.update()
}

BindDraggable('.draggable')
dropResetter.reset()